{
  "version": 3,
  "file": "httpExecutor.js",
  "sourceRoot": "",
  "sources": [
    "../../src/util/httpExecutor.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;AACA,AAAO,AAAE,AAAU,AAAE,AAAM,AAAQ;;;;;;AACnC,AAAO,AAAE,AAAS,AAAE,AAAM,AAAQ,AAOlC,AAAM;;;;;AAGJ,QAAI,AAAY;AACd,AAAE,AAAC,YAAC,AAAI,KAAC,AAAa,iBAAI,AAAI,AAAC,MAAC,AAAC;AAC/B,AAAI,iBAAC,AAAa,gBAAG,AAAI,KAAC,AAAO,QAAO,AAAO,OAAC,AAAU,cAAI,AAAI,OAAG,AAAoB,uBAAG,AAA2B,AAAC,6BAAC,AAAgB,AAAC,AAAE,AAC9I;AAAC;AACD,AAAM,eAAC,AAAI,KAAC,AAAa,AAC3B;AAAC;AAED,QAAI,AAAY,aAAC,AAAmB;AAClC,AAAI,aAAC,AAAa,gBAAG,AAAK,AAC5B;AAAC,AACF,AAQD,AAAM;;;MAAiB,kBAAQ,AAAK;AAClC,gBAA4B,AAAmI;YAAS,kFAA0B,AAAI;;AACpM,AAAK,cAAC,AAAQ,SAAC,AAAU,aAAG,AAAG,MAAG,AAAQ,SAAC,AAAa,AAAG,iBAAC,AAAW,eAAI,AAAI,OAAG,AAAE,AAAG,KAAC,AAAI,OAAG,AAAI,KAAC,AAAS,UAAC,AAAW,aAAE,AAAI,MAAE,AAAI,AAAC,AAAC,AAAC,SAAG,AAAa,gBAAG,AAAI,KAAC,AAAS,UAAC,AAAQ,SAAC,AAAO,SAAE,AAAI,MAAE,AAAI,AAAC,AAAC;AAD9K,aAAQ,WAAR,AAAQ,AAA2H;AAAS,aAAW,cAAX,AAAW,AAAmB,AAEtM;AAAC,AACF,AAED,AAAM;;;MAAuB,AAAQ,AAAS;AAG5C,gBAAoB,AAAgB;AAClC,AAAK,AAAE;AADW,aAAQ,WAAR,AAAQ,AAAQ;AAFnB,aAAQ,WAAG,AAAU,4CAAC,AAAQ,AAAC,AAIhD;AAAC;AAED,AAAU,eAAC,AAAU,OAAE,AAAgB,UAAE,AAAkB;AACzD,AAAI,aAAC,AAAQ,SAAC,AAAM,OAAC,AAAK,AAAC;AAC3B,AAAQ,iBAAC,AAAI,MAAE,AAAK,AAAC,AACvB;AAAC;AAED,AAAM,WAAC,AAAkB;AACvB,cAAM,AAAI,OAAG,AAAI,KAAC,AAAQ,SAAC,AAAM,OAAC,AAAK,AAAC;AACxC,AAAQ,iBAAC,AAAI,SAAK,AAAI,KAAC,AAAQ,WAAG,AAAI,OAAG,IAAI,AAAK,AAAC,2CAAoC,AAAI,KAAC,AAAQ,mBAAS,AAAI,IAAE,AAAC,AAAC,AACvH;AAAC,AACF,AAED,AAAM;;;AAAC,MAAM,AAAc,0CAAG,IAAI,AAAkB,AAAE,AAEtD,AAAM;uBAA2B,AAAY,MAAE,AAAoB;QAAE,2EAAuC,AAAI;QAAE,6EAAiB,AAAK;;AACtI,AAAM,WAAC,AAAO,QAAI,EAAC,AAAQ,UAAE,AAAgB,kBAAE,AAAI,MAAE,AAAI,AAAC,QAAE,AAAK,OAAE,AAAI,MAAE,AAAM,AAAC,AAClF;AAAC,AAED,AAAM;iBAAqB,AAAQ;QAAE,4EAAuB,AAAI;QAAE,2EAAuC,AAAI;QAAE,6EAAiB,AAAK;;AACnI,AAAM,WAAC,AAAc,eAAC,AAAY,aAAC,AAAO,QAAC,AAAG,KAAE,AAAK,OAAE,AAAI,MAAE,AAAM,AAAC,AACtE;AAAC",
  "sourcesContent": [
    "import { Url } from \"url\"\nimport { createHash } from \"crypto\"\nimport { Transform } from \"stream\"\n\nexport interface DownloadOptions {\n  skipDirCreation?: boolean\n  sha2?: string\n}\n\nexport class HttpExecutorHolder {\n  private _httpExecutor: HttpExecutor\n\n  get httpExecutor(): HttpExecutor {\n    if (this._httpExecutor == null) {\n      this._httpExecutor = new (require((<any>global).__test_app == null ? \"./nodeHttpExecutor\" : \"out/util/nodeHttpExecutor\").NodeHttpExecutor)()\n    }\n    return this._httpExecutor\n  }\n\n  set httpExecutor(value: HttpExecutor) {\n    this._httpExecutor = value\n  }\n}\n\nexport interface HttpExecutor {\n  request<T>(url: Url, token?: string | null, data?: {[name: string]: any; } | null, method?: string): Promise<T>\n\n  download(url: string, destination: string, options?: DownloadOptions | null): Promise<string>\n}\n\nexport class HttpError extends Error {\n  constructor(public readonly response: {statusMessage?: string | undefined, statusCode?: number | undefined, headers?: { [key: string]: string[]; } | undefined}, public description: any | null = null) {\n    super(response.statusCode + \" \" + response.statusMessage + (description == null ? \"\" : (\"\\n\" + JSON.stringify(description, null, \"  \"))) + \"\\nHeaders: \" + JSON.stringify(response.headers, null, \"  \"))\n  }\n}\n\nexport class DigestTransform extends Transform {\n  private readonly digester = createHash(\"sha256\")\n\n  constructor(private expected: string) {\n    super()\n  }\n\n  _transform(chunk: any, encoding: string, callback: Function) {\n    this.digester.update(chunk)\n    callback(null, chunk)\n  }\n\n  _flush(callback: Function): void {\n    const hash = this.digester.digest(\"hex\")\n    callback(hash === this.expected ? null : new Error(`SHA2 checksum mismatch, expected ${this.expected}, got ${hash}`))\n  }\n}\n\nexport const executorHolder = new HttpExecutorHolder()\n\nexport function githubRequest<T>(path: string, token: string | null, data: {[name: string]: any; } | null = null, method: string = \"GET\"): Promise<T> {\n  return request<T>({hostname: \"api.github.com\", path: path}, token, data, method)\n}\n\nexport function request<T>(url: Url, token: string | null = null, data: {[name: string]: any; } | null = null, method: string = \"GET\"): Promise<T> {\n  return executorHolder.httpExecutor.request(url, token, data, method)\n}"
  ]
}
