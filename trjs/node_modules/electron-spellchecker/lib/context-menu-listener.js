'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _electron = require('electron');

var _Observable = require('rxjs/Observable');

var _Subscription = require('rxjs/Subscription');

require('rxjs/add/observable/fromEvent');

require('rxjs/add/operator/map');

let d = require('debug-electron')('electron-spellchecker:context-menu-listener');

/**
 * ContextMenuListener will listen to the given window / WebView control and
 * invoke a handler function. This function usually will immediately turn around
 * and invoke {{showPopupMenu}} from {{ContextMenuBuilder}}.
 */
class ContextMenuListener {
  /**
   * Constructs a ContextMenuListener and wires up the events it needs to fire
   * the callback.
   *
   * @param  {Function} handler             The callback that will be invoked
   *                                        with the 'context-menu' info.
   * @param  {BrowserWindow|WebView} windowOrWebView  The target, either a
   *                                                  BrowserWindow or a WebView
   * @param  {Observable<Object>} contextMenuEvent  Use this for simulating a
   *                                                ContextMenu event
   */
  constructor(handler) {
    let windowOrWebView = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let contextMenuEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    this.sub = new _Subscription.Subscription();

    if (!contextMenuEvent) {
      windowOrWebView = windowOrWebView || _electron.remote.getCurrentWebContents();
      let target = 'webContents' in windowOrWebView ? windowOrWebView.webContents : windowOrWebView;

      contextMenuEvent = _Observable.Observable.fromEvent(target, 'context-menu', (e, p) => {
        e.preventDefault();return p;
      }).map(x => JSON.parse(JSON.stringify(x)));
    }

    this.sub.add(contextMenuEvent.subscribe(handler));
  }

  /**
   * Override the default logger for this class. You probably want to use
   * {{setGlobalLogger}} instead
   *
   * @param {Function} fn   The function which will operate like console.log
   */
  static setLogger(fn) {
    d = fn;
  }

  /**
   * Disconnect the events that we connected in the Constructor
   */
  unsubscribe() {
    this.sub.unsubscribe();
  }
}
exports.default = ContextMenuListener;