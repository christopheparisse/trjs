module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { utterance: peg$parseutterance },
        peg$startRuleFunction  = peg$parseutterance,

        peg$c0 = peg$FAILED,
        peg$c1 = function(s) { return s; },
        peg$c2 = function(c, s) { return s; },
        peg$c3 = function(p, s) { return p + ' ' + s; },
        peg$c4 = function(ep, s) { return ep + ' ' + s; },
        peg$c5 = "aujourd'hui",
        peg$c6 = { type: "literal", value: "aujourd'hui", description: "\"aujourd'hui\"" },
        peg$c7 = function(s) { return "aujourd'hui" + ' ' + s; },
        peg$c8 = "entr'ouvrir",
        peg$c9 = { type: "literal", value: "entr'ouvrir", description: "\"entr'ouvrir\"" },
        peg$c10 = function(s) { return "entr'ouvrir" + ' ' + s; },
        peg$c11 = "d'abord",
        peg$c12 = { type: "literal", value: "d'abord", description: "\"d'abord\"" },
        peg$c13 = function(s) { return "d'abord" + ' ' + s; },
        peg$c14 = function(m, s) { return m + ' ' + s; },
        peg$c15 = function(n, s) { return n + ' ' + s; },
        peg$c16 = function(b, s) { return s; },
        peg$c17 = function(o, s) { return o + ' ' + s; },
        peg$c18 = function(g, s) { return s; },
        peg$c19 = [],
        peg$c20 = "+<",
        peg$c21 = { type: "literal", value: "+<", description: "\"+<\"" },
        peg$c22 = "+,",
        peg$c23 = { type: "literal", value: "+,", description: "\"+,\"" },
        peg$c24 = "+^",
        peg$c25 = { type: "literal", value: "+^", description: "\"+^\"" },
        peg$c26 = "[",
        peg$c27 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c28 = "]",
        peg$c29 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c30 = function(ci, c, cf) { return [ci + c.join('') + cf]; },
        peg$c31 = "<pause",
        peg$c32 = { type: "literal", value: "<pause", description: "\"<pause\"" },
        peg$c33 = ">",
        peg$c34 = { type: "literal", value: ">", description: "\">\"" },
        peg$c35 = "<incident",
        peg$c36 = { type: "literal", value: "<incident", description: "\"<incident\"" },
        peg$c37 = "<seg>",
        peg$c38 = { type: "literal", value: "<seg>", description: "\"<seg>\"" },
        peg$c39 = function(ci) { return [ci]; },
        peg$c40 = "</seg>",
        peg$c41 = { type: "literal", value: "</seg>", description: "\"</seg>\"" },
        peg$c42 = function(go) { return ['⌉']; },
        peg$c43 = "<",
        peg$c44 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c45 = function(gi) { return ['⌈']; },
        peg$c46 = function(initial, milieu, fin) { return [initial + reste.join('')] + fin; },
        peg$c47 = null,
        peg$c48 = " ",
        peg$c49 = { type: "literal", value: " ", description: "\" \"" },
        peg$c50 = /^['\u02B2]/,
        peg$c51 = { type: "class", value: "['\\u02B2]", description: "['\\u02B2]" },
        peg$c52 = function(initial, mot, w, apos) { return [initial + mot.join('') + "'"]; },
        peg$c53 = function(mot) { return [mot.join('')]; },
        peg$c54 = /^[']/,
        peg$c55 = { type: "class", value: "[']", description: "[']" },
        peg$c56 = function(initial, apos) { return [initial + apos]; },
        peg$c57 = function(initial, reste, apos) { return [initial + reste.join('') + apos]; },
        peg$c58 = function(initial, reste) { return [initial + reste.join('')]; },
        peg$c59 = /^[\-+0-9]/,
        peg$c60 = { type: "class", value: "[\\-+0-9]", description: "[\\-+0-9]" },
        peg$c61 = /^[0-9\-+()*]/,
        peg$c62 = { type: "class", value: "[0-9\\-+()*]", description: "[0-9\\-+()*]" },
        peg$c63 = function(digits) { return [digits.join('')]; },
        peg$c64 = "#+",
        peg$c65 = { type: "literal", value: "#+", description: "\"#+\"" },
        peg$c66 = /^[.?!\/;:,]/,
        peg$c67 = { type: "class", value: "[.?!\\/;:,]", description: "[.?!\\/;:,]" },
        peg$c68 = function(p) { return ["#" + p.join('')]; },
        peg$c69 = "#",
        peg$c70 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c71 = "+",
        peg$c72 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c73 = /^[.!?,;:]/,
        peg$c74 = { type: "class", value: "[.!?,;:]", description: "[.!?,;:]" },
        peg$c75 = function(pct) { return ['#' + pct.join('')]; },
        peg$c76 = /^[.!?]/,
        peg$c77 = { type: "class", value: "[.!?]", description: "[.!?]" },
        peg$c78 = function(pct) { return ['#'+pct]; },
        peg$c79 = /^[,;:]/,
        peg$c80 = { type: "class", value: "[,;:]", description: "[,;:]" },
        peg$c81 = /^[ \t\r\n]/,
        peg$c82 = { type: "class", value: "[ \\t\\r\\n]", description: "[ \\t\\r\\n]" },
        peg$c83 = /^[#$&\xB0\xA7=*]/,
        peg$c84 = { type: "class", value: "[#$&\\xB0\\xA7=*]", description: "[#$&\\xB0\\xA7=*]" },
        peg$c85 = function(oth) { return ['_'+oth+'_']; },
        peg$c86 = /^[a-z\xE0\xE2\xE4\xE9\xE8\xEA\xEB\xE7\xEF\xEE\xF4\xF6\xF9\xFC\xFB_(){}\/\\@]/,
        peg$c87 = { type: "class", value: "[a-z\\xE0\\xE2\\xE4\\xE9\\xE8\\xEA\\xEB\\xE7\\xEF\\xEE\\xF4\\xF6\\xF9\\xFC\\xFB_(){}\\/\\\\@]", description: "[a-z\\xE0\\xE2\\xE4\\xE9\\xE8\\xEA\\xEB\\xE7\\xEF\\xEE\\xF4\\xF6\\xF9\\xFC\\xFB_(){}\\/\\\\@]" },
        peg$c88 = /^[A-Z\xC0\xC2\xC4\xC9\xC8\xCB\xCA\xC7\xCF\xCE\xD6\xD4\xDA\xDC\xDB_(){}\/\\@]/,
        peg$c89 = { type: "class", value: "[A-Z\\xC0\\xC2\\xC4\\xC9\\xC8\\xCB\\xCA\\xC7\\xCF\\xCE\\xD6\\xD4\\xDA\\xDC\\xDB_(){}\\/\\\\@]", description: "[A-Z\\xC0\\xC2\\xC4\\xC9\\xC8\\xCB\\xCA\\xC7\\xCF\\xCE\\xD6\\xD4\\xDA\\xDC\\xDB_(){}\\/\\\\@]" },
        peg$c90 = /^[iy\u0268\u0289\u026Fu\u026A\u028F\u028Ae\xF8\u0259\u0258\u0275\u0264o\u025B\u0153\u025C\u025E\u028C\u0254\xE6\u0250a\u0276\u0251\u0252\u025A\u025D]/,
        peg$c91 = { type: "class", value: "[iy\\u0268\\u0289\\u026Fu\\u026A\\u028F\\u028Ae\\xF8\\u0259\\u0258\\u0275\\u0264o\\u025B\\u0153\\u025C\\u025E\\u028C\\u0254\\xE6\\u0250a\\u0276\\u0251\\u0252\\u025A\\u025D]", description: "[iy\\u0268\\u0289\\u026Fu\\u026A\\u028F\\u028Ae\\xF8\\u0259\\u0258\\u0275\\u0264o\\u025B\\u0153\\u025C\\u025E\\u028C\\u0254\\xE6\\u0250a\\u0276\\u0251\\u0252\\u025A\\u025D]" },
        peg$c92 = /^[\u1EBD\xF8\u0303\u025B\u0303\xF5\u0254\u0303\xE3\u0251\u0303]/,
        peg$c93 = { type: "class", value: "[\\u1EBD\\xF8\\u0303\\u025B\\u0303\\xF5\\u0254\\u0303\\xE3\\u0251\\u0303]", description: "[\\u1EBD\\xF8\\u0303\\u025B\\u0303\\xF5\\u0254\\u0303\\xE3\\u0251\\u0303]" },
        peg$c94 = /^[pbdt\u0288\u0256c\u025Fk\u0261q\u0262\u0294m\u0271\u0273\u0272\u014B\u0274\u0299r\u027D\u0280\u2C71\u027E\u0278\u03B2fv\u03B8\xF0sz\u0283\u0292\u0282\u0290\xE7\u029Dx\u0263\u03C7\u0281\u0127\u0295h\u026C\u026E\u028B\u0279\u027Bj\u0270l\u026D\u028E\u029F]/,
        peg$c95 = { type: "class", value: "[pbdt\\u0288\\u0256c\\u025Fk\\u0261q\\u0262\\u0294m\\u0271\\u0273\\u0272\\u014B\\u0274\\u0299r\\u027D\\u0280\\u2C71\\u027E\\u0278\\u03B2fv\\u03B8\\xF0sz\\u0283\\u0292\\u0282\\u0290\\xE7\\u029Dx\\u0263\\u03C7\\u0281\\u0127\\u0295h\\u026C\\u026E\\u028B\\u0279\\u027Bj\\u0270l\\u026D\\u028E\\u029F]", description: "[pbdt\\u0288\\u0256c\\u025Fk\\u0261q\\u0262\\u0294m\\u0271\\u0273\\u0272\\u014B\\u0274\\u0299r\\u027D\\u0280\\u2C71\\u027E\\u0278\\u03B2fv\\u03B8\\xF0sz\\u0283\\u0292\\u0282\\u0290\\xE7\\u029Dx\\u0263\\u03C7\\u0281\\u0127\\u0295h\\u026C\\u026E\\u028B\\u0279\\u027Bj\\u0270l\\u026D\\u028E\\u029F]" },
        peg$c96 = /^[\-+]/,
        peg$c97 = { type: "class", value: "[\\-+]", description: "[\\-+]" },
        peg$c98 = /^[\-+']/,
        peg$c99 = { type: "class", value: "[\\-+']", description: "[\\-+']" },
        peg$c100 = /^[<>]/,
        peg$c101 = { type: "class", value: "[<>]", description: "[<>]" },
        peg$c102 = /^[0-9#$&\xB0\xA7=*(){}\/\\@.!?:;'," \t\r\n]/,
        peg$c103 = { type: "class", value: "[0-9#$&\\xB0\\xA7=*(){}\\/\\\\@.!?:;',\" \\t\\r\\n]", description: "[0-9#$&\\xB0\\xA7=*(){}\\/\\\\@.!?:;',\" \\t\\r\\n]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parseutterance() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsemarkinit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseutterance();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c1(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecrochet();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseutterance();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c2(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsechevron();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseutterance();
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c2(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseponctu();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseutterance();
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c3(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseendponctu();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseutterance();
                if (s2 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c4(s1, s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 11) === peg$c5) {
                  s1 = peg$c5;
                  peg$currPos += 11;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c6); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseutterance();
                  if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c7(s2);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 11) === peg$c8) {
                    s1 = peg$c8;
                    peg$currPos += 11;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c9); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseutterance();
                    if (s2 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c10(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 7) === peg$c11) {
                      s1 = peg$c11;
                      peg$currPos += 7;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c12); }
                    }
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseutterance();
                      if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c13(s2);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parsemotnombre();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parseutterance();
                        if (s2 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c14(s1, s2);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parsemotmaj();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parseutterance();
                          if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c14(s1, s2);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parsemot();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parseutterance();
                            if (s2 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c14(s1, s2);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parsenombre();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parseutterance();
                              if (s2 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c15(s1, s2);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseblank();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parseutterance();
                                if (s2 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c16(s1, s2);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parseothers();
                                if (s1 !== peg$FAILED) {
                                  s2 = peg$parseutterance();
                                  if (s2 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c17(s1, s2);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parsegroupin();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseutterance();
                                    if (s2 !== peg$FAILED) {
                                      peg$reportedPos = s0;
                                      s1 = peg$c18(s1, s2);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parsegroupout();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parseutterance();
                                      if (s2 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c18(s1, s2);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = [];
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemarkinit() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c20) {
        s0 = peg$c20;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c22) {
          s0 = peg$c22;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c24) {
            s0 = peg$c24;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c20) {
              s0 = peg$c20;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecrochet() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c26;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsetoutsymb();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsetoutsymb();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c28;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c29); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c30(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsechevron() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c31) {
        s1 = peg$c31;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsetoutsymbsanschevron();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsetoutsymbsanschevron();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s3 = peg$c33;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c30(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c35) {
          s1 = peg$c35;
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsetoutsymbsanschevron();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsetoutsymbsanschevron();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 62) {
              s3 = peg$c33;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c30(s1, s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c37) {
            s1 = peg$c37;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c39(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c40) {
              s1 = peg$c40;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c39(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsegroupout() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 62) {
        s1 = peg$c33;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c42(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsegroupin() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c43;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c45(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsemot() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parselettre();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parselettremilieuapos();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parselettremilieuapos();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselettreapi();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c46(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselettreapi();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parselettremilieuapi();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parselettremilieuapi();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 32) {
              s3 = peg$c48;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c49); }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c47;
            }
            if (s3 !== peg$FAILED) {
              if (peg$c50.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c51); }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c52(s1, s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parselettreapi();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parselettreapi();
            }
          } else {
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c53(s1);
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsemotmaj() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselettremaj();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parselettremilieumaj();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parselettremilieumaj();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parselettreminmaj();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c46(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselettremaj();
        if (s1 !== peg$FAILED) {
          if (peg$c54.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c55); }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c56(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parselettremaj();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parselettreapi();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parselettreapi();
              }
            } else {
              s2 = peg$c0;
            }
            if (s2 !== peg$FAILED) {
              if (peg$c54.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c55); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c57(s1, s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parselettremaj();
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parselettremilieumaj();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parselettremilieumaj();
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c58(s1, s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
      }

      return s0;
    }

    function peg$parsemotnombre() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselettreminmaj();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c59.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c59.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c60); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c58(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsenombre() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c61.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c62); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c61.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c63(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseendponctu() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c64) {
        s1 = peg$c64;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c66.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c67); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c66.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c68(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c69;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c66.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c67); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c66.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c67); }
              }
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c68(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 43) {
            s1 = peg$c71;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$c66.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c67); }
            }
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (peg$c66.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c67); }
                }
              }
            } else {
              s2 = peg$c0;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c68(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            if (peg$c73.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c74); }
            }
            if (s2 !== peg$FAILED) {
              while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$c73.test(input.charAt(peg$currPos))) {
                  s2 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c74); }
                }
              }
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c75(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseponctu() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c76.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c76.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c77); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c78(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c79.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c79.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c80); }
            }
          }
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c78(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseblank() {
      var s0, s1;

      s0 = [];
      if (peg$c81.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c82); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c81.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c82); }
          }
        }
      } else {
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseothers() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c83.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c85(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parselettre() {
      var s0;

      if (peg$c86.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }

      return s0;
    }

    function peg$parselettremaj() {
      var s0;

      if (peg$c88.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }

      return s0;
    }

    function peg$parseapi() {
      var s0;

      if (peg$c90.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c92.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c93); }
        }
        if (s0 === peg$FAILED) {
          if (peg$c94.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c95); }
          }
        }
      }

      return s0;
    }

    function peg$parselettreapi() {
      var s0;

      s0 = peg$parselettre();
      if (s0 === peg$FAILED) {
        s0 = peg$parseapi();
      }

      return s0;
    }

    function peg$parselettremilieuapi() {
      var s0;

      s0 = peg$parselettre();
      if (s0 === peg$FAILED) {
        s0 = peg$parseapi();
        if (s0 === peg$FAILED) {
          if (peg$c96.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c97); }
          }
        }
      }

      return s0;
    }

    function peg$parselettreminmaj() {
      var s0;

      s0 = peg$parselettre();
      if (s0 === peg$FAILED) {
        s0 = peg$parselettremaj();
        if (s0 === peg$FAILED) {
          s0 = peg$parseapi();
        }
      }

      return s0;
    }

    function peg$parselettremilieumaj() {
      var s0;

      s0 = peg$parselettre();
      if (s0 === peg$FAILED) {
        s0 = peg$parselettremaj();
        if (s0 === peg$FAILED) {
          s0 = peg$parseapi();
          if (s0 === peg$FAILED) {
            if (peg$c96.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parselettremilieuapos() {
      var s0;

      s0 = peg$parselettre();
      if (s0 === peg$FAILED) {
        s0 = peg$parselettremaj();
        if (s0 === peg$FAILED) {
          s0 = peg$parseapi();
          if (s0 === peg$FAILED) {
            if (peg$c98.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c99); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsetoutsymb() {
      var s0;

      s0 = peg$parsetoutsymbsanschevron();
      if (s0 === peg$FAILED) {
        if (peg$c100.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }
      }

      return s0;
    }

    function peg$parsetoutsymbsanschevron() {
      var s0;

      s0 = peg$parselettre();
      if (s0 === peg$FAILED) {
        s0 = peg$parselettremaj();
        if (s0 === peg$FAILED) {
          if (peg$c102.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
        }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
